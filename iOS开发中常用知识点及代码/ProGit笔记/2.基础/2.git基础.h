//
//  2git基础.h
//  iOS开发中常用知识点及代码
//
//  Created by apple on 2018/3/5.
//  Copyright © 2018年 apple. All rights reserved.
//
/**
 一、获取Git仓库：
     第一种是在现有项目或目录下导入所有文件到 Git 中:
        $git init  --该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件,仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪
        $git add .  --实现对所有/指定文件的跟踪，
        $git commit -m "描述"  --然后执行 git commit 提交
 
    第二种是从一个服务器克隆一个现有的 Git 仓库
        $ git clone https://github.com/libgit2/libgit2
        or
        $ git clone https://github.com/libgit2/libgit2 mylibgit  //自定义本地仓库的名字
 
 二、记录每次更新到仓库
    1.只要在 Changes to be committed 这行下面的，就说明是已暂存状态。
    2.git add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。
    3.出现在 Changes not staged for commit 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。
    4. git add 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等,可理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适
    5.git status -s 文件的状态
     新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。  M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区
    6. git diff
        该命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。
        若要要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令
        git diff --cached和git diff命令的区别和解释如下：
            git diff 是查看工作区域的文件和暂存区文件的不同内容
            git diff --cached 是查看文件两次添加到暂存区的不同内容
    7.跳过使用暂存区域
        git commit -a -m "提交描述"   这样会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤
    8.移除文件
        要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。下一次提交时，该文件就不再纳入版本管理了
        如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）
        另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 --cached 选项：
            git rm --cached 文件
 
 三、Git 基础 - 查看提交历史
    git log
    git log -p -2  一个常用的选项是 -p，用来显示每次提交的内容差异。 你也可以加上 -2 来仅显示最近两次提交
    git log --stat
    git log --pretty=oneline,short，full 和 fuller
    git log --pretty=format:"%h - %an, %ar : %s" 自定义输出格式
 
 四、Git 基础 - 撤消操作
    1.有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了,就可以使用 git commit --amend这个命令
    git commit --amend   这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。
     你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：
     $ git commit -m 'initial commit'
     $ git add forgotten_file
     $ git commit --amend
     最终你只会有一个提交 - 第二次提交将代替第一次提交的结果。
 
   2.取消暂存文件
     git reset HEAD 文件名   把暂存区的文件重新返回到工作区，该文件变成了已修改未暂存状态
 
   3.撤销对文件的修改
      就是到还原上次提交后的状态（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）
      git checkout --文件名  撤销对该文件的所有修改（很危险的命令操作,对这个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它）
 五、Git 基础 - 远程仓库的使用
    1.git remote 列出你指定的每一个远程服务器的简写
     git remote -v 会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL
    2. 添加远程仓库
        运行 git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写
    3.从远程仓库中抓取与拉取
     git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。抓取克隆（或上一次抓取）后新推送的所有工作
     git pull 有一个分支设置为跟踪一个远程分支，可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。
 
 
 
 
 
 
 
 
 
 
 
 */










